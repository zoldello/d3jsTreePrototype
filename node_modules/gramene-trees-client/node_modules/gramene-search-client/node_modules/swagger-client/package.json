{
  "_args": [
    [
      {
        "name": "swagger-client",
        "raw": "swagger-client@https://registry.npmjs.org/swagger-client/-/swagger-client-2.1.10.tgz",
        "rawSpec": "https://registry.npmjs.org/swagger-client/-/swagger-client-2.1.10.tgz",
        "scope": null,
        "spec": "https://registry.npmjs.org/swagger-client/-/swagger-client-2.1.10.tgz",
        "type": "remote"
      },
      "/home/philip/Documents/Projects/d3jsTreePrototype/node_modules/gramene-trees-client/node_modules/gramene-search-client"
    ]
  ],
  "_from": "https://registry.npmjs.org/swagger-client/-/swagger-client-2.1.10.tgz",
  "_id": "swagger-client@2.1.10",
  "_inCache": true,
  "_location": "/gramene-trees-client/gramene-search-client/swagger-client",
  "_phantomChildren": {
    "lodash": "3.10.1"
  },
  "_requested": {
    "name": "swagger-client",
    "raw": "swagger-client@https://registry.npmjs.org/swagger-client/-/swagger-client-2.1.10.tgz",
    "rawSpec": "https://registry.npmjs.org/swagger-client/-/swagger-client-2.1.10.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/swagger-client/-/swagger-client-2.1.10.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/gramene-trees-client/gramene-search-client"
  ],
  "_resolved": "https://registry.npmjs.org/swagger-client/-/swagger-client-2.1.10.tgz",
  "_shasum": "672ae249f99a04841f6c48283608ee92724abcb3",
  "_shrinkwrap": null,
  "_spec": "swagger-client@https://registry.npmjs.org/swagger-client/-/swagger-client-2.1.10.tgz",
  "_where": "/home/philip/Documents/Projects/d3jsTreePrototype/node_modules/gramene-trees-client/node_modules/gramene-search-client",
  "author": {
    "email": "fehguy@gmail.com",
    "name": "Tony Tam"
  },
  "bugs": {
    "url": "https://github.com/swagger-api/swagger-js/issues"
  },
  "contributors": [
    {
      "email": "jcscoobyrs@gmail.com",
      "name": "Jeremy Whitlock"
    }
  ],
  "dependencies": {
    "btoa": "^1.1.2",
    "cookiejar": "^2.0.1",
    "js-yaml": "^3.3.0",
    "lodash-compat": "^3.5.0",
    "q": "^1.4.1",
    "superagent": "^1.2"
  },
  "description": "swagger-client is a javascript client for use with swaggering APIs.",
  "devDependencies": {
    "async": "^0.9.0",
    "brfs": "^1.4.0",
    "browserify": "^9.0.3",
    "buffer": "3.4.3",
    "chai": "^2.3.0",
    "connect-cors": "^0.5.6",
    "del": "^1.1.1",
    "expect": "1.4.0",
    "faux-jax": "^4.0.0",
    "gulp": "^3.8.10",
    "gulp-buffer": "0.0.2",
    "gulp-connect": "^2.2.0",
    "gulp-header": "^1.2.2",
    "gulp-istanbul": "^0.5.0",
    "gulp-jshint": "^1.9.0",
    "gulp-mocha": "^2.0.0",
    "http-server": "^0.8.0",
    "jshint-stylish": "^1.0.1",
    "karma": "^0.13.0",
    "karma-browserify": "^4.2.1",
    "karma-firefox-launcher": "^0.1.6",
    "karma-mocha": "^0.1.10",
    "karma-source-map-support": "^1.0.0",
    "mocha": "^1.21.3",
    "object.assign": "^3.0.0",
    "selenium-webdriver": "^2.45.1",
    "uglifyify": "^3.0.1",
    "unit.js": "^2.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "engines": {
    "node": ">= 0.6.6"
  },
  "files": [
    "LICENSE",
    "lib",
    "browser",
    "index.js"
  ],
  "homepage": "http://swagger.io",
  "license": "Apache-2.0",
  "main": "index.js",
  "name": "swagger-client",
  "optionalDependencies": {},
  "readme": "# Swagger JS library\n\n[![Build Status](https://travis-ci.org/swagger-api/swagger-js.svg?branch=master)](https://travis-ci.org/swagger-api/swagger-js)\n\nThis is the Swagger javascript client for use with [swagger](http://swagger.io) enabled APIs.\nIt's written in javascript and tested with mocha, and is the fastest way to enable a javascript client to communicate with a swagger-enabled server.\n\nCheck out [Swagger-Spec](https://github.com/swagger-api/swagger-spec) for additional information about the Swagger project, including additional libraries with support for other languages and more.\n\n\n### Calling an API with swagger + node.js!\n\nInstall swagger-client:\n```\nnpm install swagger-client\n```\n\nor:\n\n```\nbower install swagger-js\n```\n\nThen let swagger do the work!\n```js\nvar client = require('swagger-client');\n\nvar swagger = new client({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    swagger.pet.getPetById({petId:7},{responseContentType: 'application/json'},function(pet){\n      console.log('pet', pet);\n    });\n  }\n});\n```\n\nNOTE: we're explicitly setting the responseContentType, because we don't want you getting stuck when \nthere is more than one content type available.\n\nThat's it!  You'll get a JSON response with the default callback handler:\n\n```json\n{\n  \"id\": 1,\n  \"category\": {\n    \"id\": 2,\n    \"name\": \"Cats\"\n  },\n  \"name\": \"Cat 1\",\n  \"photoUrls\": [\n    \"url1\",\n    \"url2\"\n  ],\n  \"tags\": [\n    {\n      \"id\": 1,\n      \"name\": \"tag1\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"tag2\"\n    }\n  ],\n  \"status\": \"available\"\n}\n```\n\n### Handling success and failures\n\nYou need to pass success and error functions to do anything reasonable with the responses:\n\n```js\nvar client = require('swagger-client');\n\nvar swagger = new client({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  success: function() {\n    swagger.pet.getPetById({petId:7}, function(success){\n      console.log('succeeded and returned this object: ' + success.obj);\n    },\n    function(error) {\n      console.log('failed with the following: ' + error.statusText);\n    });\n  }\n});\n```\n\nYou can use promises too, by passing the `usePromise: true` option:\n\n```js\nvar Swagger = require('swagger-client');\n\nnew Swagger({\n  url: 'http://petstore.swagger.io/v2/swagger.json',\n  usePromise: true\n})\n.then(function(client) {\n  client.pet.getPetById({petId:7})\n    .then(function(pet) {\n      console.log(pet.obj);\n    })\n    .catch(function(error) {\n      console.log('Oops!  failed with message: ' + error.statusText);\n    });\n});\n```\n\nNeed to pass an API key?  Configure one as a query string:\n\n```js\nclient.clientAuthorizations.add(\"apiKey\", new client.ApiKeyAuthorization(\"api_key\",\"special-key\",\"query\"));\n```\n\n...or with a header:\n\n```js\nclient.clientAuthorizations.add(\"apiKey\", new client.ApiKeyAuthorization(\"api_key\",\"special-key\",\"header\"));\n```\n\n...or with the swagger-client constructor:\n\n```js\nvar swagger = new client({\n  url: 'http://example.com/spec.json',\n  success: function() {},\n  authorizations : {\n    easyapi_basic: new client.PasswordAuthorization('<username>', '<password>'),\n    someHeaderAuth: new client.ApiKeyAuthorization('<nameOfHeader>', '<value>', 'header'),\n    someQueryAuth: new client.ApiKeyAuthorization('<nameOfQueryKey>', '<value>', 'query'),\n    someCookieAuth: new client.CookieAuthorization('<cookie>'),\n  }\n});\n```\n\n### Calling an API with swagger + the browser!\n\nDownload `browser/swagger-client.js` into your webapp:\n\n```js\n<script src='browser/swagger-client.js' type='text/javascript'></script>\n<script type=\"text/javascript\">\n  // initialize swagger, point to a resource listing\n  window.swagger = new SwaggerClient({\n    url: \"http://petstore.swagger.io/v2/swagger.json\",\n    success: function() {\n      // upon connect, fetch a pet and set contents to element \"mydata\"\n      swagger.pet.getPetById({petId:1},{responseContentType: 'application/json'}, function(data) {\n        document.getElementById(\"mydata\").innerHTML = JSON.stringify(data.obj);\n      });\n    }\n  });\n</script>\n\n<body>\n  <div id=\"mydata\"></div>\n</body>\n```\n\n### Need to send an object to your API via POST or PUT?\n```js\nvar pet = {\n  id: 100,\n  name: \"dog\"};\n\nswagger.pet.addPet({body: pet});\n```\n\n### Sending XML in as a payload to your API?\n```js\nvar pet = \"<Pet><id>2</id><name>monster</name></Pet>\";\n\nswagger.pet.addPet({body: pet}, {requestContentType:\"application/xml\"});\n```\n\n### Need XML response?\n```js\nswagger.pet.getPetById({petId:1}, {responseContentType:\"application/xml\"});\n```\n\n### Custom request signing\nYou can easily write your own request signing code for Swagger.  For example:\n\n```js\nvar CustomRequestSigner = function(name) {\n  this.name = name;\n};\n\nCustomRequestSigner.prototype.apply = function(obj, authorizations) {\n  var hashFunction = this._btoa;\n  var hash = hashFunction(obj.url);\n\n  obj.headers[\"signature\"] = hash;\n  return true;\n};\n```\n\nIn the above simple example, we're creating a new request signer that simply\nBase64 encodes the URL.  Of course you'd do something more sophisticated, but\nafter encoding it, a header called `signature` is set before sending the request.\n\n### How does it work?\nThe swagger javascript client reads the swagger api definition directly from the server.  As it does, it constructs a client based on the api definition, which means it is completely dynamic.  It even reads the api text descriptions (which are intended for humans!) and provides help if you need it:\n\n```js\ns.apis.pet.getPetById.help()\n'* petId (required) - ID of pet that needs to be fetched'\n```\n\nThe HTTP requests themselves are handled by the excellent [shred](https://github.com/automatthew/shred) library, which has a ton of features itself.  But it runs on both node and the browser.\n\n\nDevelopment\n-----------\n\nPlease [fork the code](https://github.com/swagger-api/swagger-js) and help us improve\nswagger-client.js. Send us a pull request to the `master` branch!  Tests make merges get accepted more quickly.\n\nswagger-js use gulp for Node.js.\n\n```bash\n# Install the gulp client on the path\nnpm install -g gulp\n\n# Install all project dependencies\nnpm install\n```\n\n```bash\n# List all tasks.\ngulp -T\n\n# Run lint (will not fail if there are errors/warnings), tests (without coverage) and builds the browser binaries\ngulp\n\n# Run the test suite (without coverage)\ngulp test\n\n# Build the browser binaries (One for development with source maps and one that is minified and without source maps) in the browser directory\ngulp build\n\n# Continuously run the test suite:\ngulp watch\n\n# Run jshint report\ngulp lint\n\n# Run a coverage report based on running the unit tests\ngulp coverage\n```\n\nLicense\n-------\n\nCopyright 2011-2015 SmartBear Software\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n[apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/swagger-api/swagger-js.git"
  },
  "scripts": {
    "browsertest": "gulp browsertest",
    "build": "gulp build",
    "dev": "gulp watch",
    "test": "gulp test"
  },
  "version": "2.1.10"
}
