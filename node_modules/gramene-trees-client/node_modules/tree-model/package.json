{
  "_args": [
    [
      {
        "name": "tree-model",
        "raw": "tree-model@https://registry.npmjs.org/tree-model/-/tree-model-1.0.4.tgz",
        "rawSpec": "https://registry.npmjs.org/tree-model/-/tree-model-1.0.4.tgz",
        "scope": null,
        "spec": "https://registry.npmjs.org/tree-model/-/tree-model-1.0.4.tgz",
        "type": "remote"
      },
      "/home/philip/Documents/Projects/d3jsTreePrototype/node_modules/gramene-trees-client"
    ]
  ],
  "_from": "tree-model@>=1.0.0 <2.0.0",
  "_id": "tree-model@1.0.4",
  "_inCache": true,
  "_location": "/gramene-trees-client/tree-model",
  "_phantomChildren": {},
  "_requested": {
    "name": "tree-model",
    "raw": "tree-model@https://registry.npmjs.org/tree-model/-/tree-model-1.0.4.tgz",
    "rawSpec": "https://registry.npmjs.org/tree-model/-/tree-model-1.0.4.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/tree-model/-/tree-model-1.0.4.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/gramene-trees-client"
  ],
  "_resolved": "https://registry.npmjs.org/tree-model/-/tree-model-1.0.4.tgz",
  "_shasum": "c10d0baf843696b0b67cd1ead95bc04321118790",
  "_shrinkwrap": null,
  "_spec": "tree-model@https://registry.npmjs.org/tree-model/-/tree-model-1.0.4.tgz",
  "_where": "/home/philip/Documents/Projects/d3jsTreePrototype/node_modules/gramene-trees-client",
  "author": {
    "email": "jnss81@gmail.com",
    "name": "JoÃ£o Nuno Silva",
    "url": "http://jnuno.com"
  },
  "bugs": {
    "url": "https://github.com/joaonuno/tree-model-js/issues"
  },
  "dependencies": {
    "find-insert-index": "0.0.1",
    "mergesort": "0.0.1"
  },
  "description": "Manipulate and traverse tree-like structures in javascript.",
  "devDependencies": {
    "browserify": "11.2.0",
    "chai": "3.3.0",
    "jscs": "2.2.1",
    "jshint": "2.8.0",
    "mocha": "2.3.3",
    "sinon": "1.17.1",
    "uglify-js": "2.4.24"
  },
  "homepage": "http://jnuno.com/tree-model-js",
  "keywords": [
    "tree",
    "hierarchy",
    "browser",
    "node",
    "requirejs"
  ],
  "license": "MIT",
  "main": "TreeModel.js",
  "name": "tree-model",
  "optionalDependencies": {},
  "readme": "# TreeModel\n\nManipulate and traverse tree-like structures in javascript.\n\nFor download and demos, please [visit TreeModel website](http://jnuno.com/tree-model-js).\n\n[![Build Status](https://travis-ci.org/joaonuno/tree-model-js.png)](https://travis-ci.org/joaonuno/tree-model-js)\n\n## Installation\n\n### Node\n\nTreeModel is available as an npm module so you can install it with `npm install tree-model` and use it in your script:\n\n```js\nvar TreeModel = require('tree-model'),\n    tree = new TreeModel(),\n    root = tree.parse({name: 'a', children: [{name: 'b'}]});\n```\n\n### Browser\n\n[Visit TreeModel website](http://jnuno.com/tree-model-js) to download browser-ready bundles.\n\n## Questions?\n\nIf you have any doubt using this library please post a question on http://stackoverflow.com using the tag `treemodel`.\n\n## API Reference\n\n### Create a new TreeModel\n\nCreate a new TreeModel with the given options.\n\n```js\nvar tree = new TreeModel(options)\n```\n\nValid properties for the options object are:\n\n* `childrenPropertyName` - The name for the children array property. Default is `children`;\n* `modelComparatorFn` - A comparator function to sort the children when parsing the model and adding children. The default order policy is to keep the parsed order and append new children. The comparator function receives the model for two nodes just like the [Array.sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) function. The provided sort algorithm is **stable**.\n\n### Parse the hierarchy object\n\nParse the given user defined model and return the root Node object.\n\n```js\nNode tree.parse(model)\n```\n\n### Is Root?\n\nReturn `true` if this Node is the root, `false` otherwise.\n\n```js\nBoolean node.isRoot()\n```\n\n### Has Children?\n\nReturn `true` if this Node has one or more children, `false` otherwise.\n\n```js\nBoolean node.hasChildren()\n```\n\n### Add a child\n\nAdd the given node as child of this one. Return the child Node.\n\n```js\nNode parentNode.addChild(childNode)\n```\n\n### Add a child at a given index\n\nAdd the given node as child of this one at the given index. Return the child Node.\n\n```js\nNode parentNode.addChildAtIndex(childNode, index)\n```\n\n### Set the index of a node among its siblings\n\nSets the index of the node among its siblings to the given value. Return the node itself.\n\n```js\nNode node.setIndex(index)\n```\n\n### Get the index of a node among its siblings\n\nGets the index of the node relative to its siblings. Return the index value.\n\n```js\nInt node.getIndex()\n```\n\n### Get the node path\n\nGet the array of Nodes representing the path from the root to this Node (inclusive).\n\n```js\nArray<Node> node.getPath()\n```\n\n### Delete a node from the tree\n\nDrop the subtree starting at this node. Returns the node itself, which is now a root node.\n\n```js\nNode node.drop()\n```\n\n*Warning* - Dropping a node while walking the tree is not supported. You must first collect the nodes to drop using one of the traversal functions and then drop them. Example:\n\n```js\nroot.all( /* predicate */ ).forEach(function (node) {\n  node.drop();\n});\n```\n\n### Find a node\n\nStarting from this node, find the first Node that matches the predicate and return it. The **predicate** is a function wich receives the visited Node and returns `true` if the Node should be picked and `false` otherwise.\n\n```js\nNode node.first(predicate)\n```\n\n### Find all nodes\n\nStarting from this node, find all Nodes that match the predicate and return these.\n\n```js\nArray<Node> node.all(predicate)\n```\n\n### Walk the tree\n\nStarting from this node, traverse the subtree calling the action for each visited node. The action is a function which receives the visited Node as argument. The traversal can be halted by returning `false` from the action.\n\n```js\nnode.walk([options], action, [context])\n```\n\n**Note** - `first`, `all` and `walk` can optionally receive as first argument an object with traversal options. Currently the only supported option is the traversal `strategy` which can be any of the following:\n\n* `{strategy: 'pre'}` - Depth-first pre-order *[default]*;\n* `{strategy: 'post'}` - Depth-first post-order;\n* `{strategy: 'breadth'}` - Breadth-first.\n\nThese functions can also take, as the last parameter, the *context* on which the action will be called.\n\n## Contributing\n\n### Setup\n\nFork this repository and run `npm install` on the project root folder to make sure you have all project dependencies installed.\n\n### Code Linting\n\nRun `npm run lint`\n\nThis will check both source and tests for code correctness and style compliance.\n\n### Running Tests\n\nRun `npm test`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joaonuno/tree-model-js.git"
  },
  "scripts": {
    "dist": "mkdir -p dist && browserify index.js -o dist/TreeModel.js -s TreeModel && uglifyjs dist/TreeModel.js > dist/TreeModel-min.js",
    "lint": "jshint index.js test/test.js && jscs index.js test/test.js",
    "test": "mocha"
  },
  "version": "1.0.4"
}
